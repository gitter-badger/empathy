<?php


if(false == @include('./vendor/autoload.php')) {

    die('Please install composer deps.');
}

define('TPL_CACHE', './tpl/templates_c');
define('LIB_PATH', './vendor/mikejw/empathy');
define('ELIB_PUBLIC', '../vendor/mikejw/elib-base/public'); # relative to directory where symlink is created


function read_yaml($file)
{
    if(!file_exists($file)) {

        die('YAML file '.$file.' does not exist.');
    }
    $s = new \Spyc();
    return $s->YAMLLoad($file); 
}

function read_app_config()
{
    return read_yaml('./config.yml');
}

function read_global_config()
{
    return read_yaml(LIB_PATH.'/config.yml');
}

function execute($command)
{
    $output = array();
    $var = null;
    exec($command, $output, $var);
    //echo $command."\n";
}

function invalid_action()
{
    \cli\out_padded("Not a valid action. Run with --help (-h) flag.");
}

function option_mysql($action)
{
    global $config, $app_config;

    if($action === "") {
        $action = 'dump';
    }

    switch($action){
        case 'setup':
            execute($config['mysql'].' -u root --password='.$app_config['db_pass'].' < setup.sql');
            execute($config['mysql'].' -u root --password='.$app_config['db_pass'].' < inserts.sql');   
            break;
        case 'dump':
            \cli\out_padded("Performing dump...");
            execute($config['mysql_dump'].' -u root --password='.$app_config['db_pass']
                .' --no-create-info --complete-insert '.$app_config['db_name'].' > dump.sql');
            break;
        case 'populate':
            execute($config['mysql'].' -u root --password='.$app_config['db_pass'].' < setup.sql');
            execute($config['mysql'].' -u root --password='.$app_config['db_pass'].' '.$app_config['db_name'].' < dump.sql');
            break;
        case 'extra':
            execute($config['mysql'].' -u root --password='.$app_config['db_pass'].' < extra.sql');
            break;
        default:
            invalid_action();
            break;
    }
}


function option_node($action)
{
    switch($action){
        case 'compile_less':

            echo 'foo';
            $css_dir = './public_html/css/less';
            $less_command = './node_modules/.bin/lessc --yui-compress';
            $less_files = $css_dir.'/*.less';
            $src_files = glob($less_files);

            foreach($src_files as $file) { 
                
                $css = preg_replace('/\.less/', '.css', $file);
                $command = "$less_command $file $css";
                echo $command;
                //`$command`; 
            }
            $init_css = './public_html/elib/init.min.css';
            //`cat $init_css $css > ./tmp.css; mv tmp.css $css`;
        
            break;
        case 'compile_js':
            break;
        default:
            invalid_action();
            break;
    }

}


function option_misc($action)
{
    switch($action){
        case 'tpl_cache':
            break;
        default:
            invalid_action();
            break;
    }

}



function main()
{
    echo "\n
                                  __  __         
      ___  ____ ___  ____  ____ _/ /_/ /_  __  __
     / _ \/ __ `__ \/ __ \/ __ `/ __/ __ \/ / / /
    /  __/ / / / / / /_/ / /_/ / /_/ / / / /_/ / 
    \___/_/ /_/ /_/ .___/\__,_/\__/_/ /_/\__, /  
                 /_/                    /____/ v0.9.x    
    \n\n";
    $arguments = new \cli\Arguments(array('strict' => false));
    $arguments->addFlag(array('help', 'h'), 'Show this help screen');
    $arguments->addFlag(array('new_app'), 'Create new app.');
    $arguments->addFlag('version', 'Display the MVC version.');
    $arguments->addOption(array('mysql', 'm'), array(
                              'default'     => 'dump',
                              'description' => 'Perform MySQL operation. Default is database dump.'));
    $arguments->addOption(array('node', 'n'), array(
                              'default'     => null,
                              'description' => 'Perform node.js operation.'));
    $arguments->addOption('misc', array(
                              'default'     => null,
                              'description' => 'Perform misc operation.'));
    $arguments->parse();

    //echo $arguments->asJSON(); exit();

    if($arguments['help']) {
        \cli\out_padded($arguments->getHelpScreen());
        \cli\out_padded("\n");
    } else {
        $valid_options = array('mysql', 'node', 'misc');

        foreach($valid_options as $o) {

            if(isset($arguments[$o])) {

                $func = 'option_'.$o;
                $func($arguments[$o]);
            }
        }
    }
}



$app_config = read_app_config();
$config = read_global_config();
main();


